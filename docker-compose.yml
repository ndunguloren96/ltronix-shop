# docker-compose.yml
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media

  backend:
    build:
      context: ./ecommerce
      dockerfile: Dockerfile
      args:
        DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
        SOCIAL_AUTH_GOOGLE_OAUTH2_KEY: ${SOCIAL_AUTH_GOOGLE_OAUTH2_KEY}
        SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET: ${SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET}
        MPESA_CONSUMER_KEY: ${MPESA_CONSUMER_KEY}
        MPESA_CONSUMER_SECRET: ${MPESA_CONSUMER_SECRET}
        MPESA_EXPRESS_SHORTCODE: ${MPESA_EXPRESS_SHORTCODE}
        MPESA_PASSKEY: ${MPESA_PASSKEY}
        MPESA_ENV: ${MPESA_ENV}
        MPESA_SHORTCODE: ${MPESA_SHORTCODE}
        MPESA_CALLBACK_URL: ${MPESA_CALLBACK_URL}
        SENTRY_DSN: ${SENTRY_DSN}
        DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
        SENDGRID_API_KEY: ${SENDGRID_API_KEY}
        DATABASE_USER: ${DATABASE_USER}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        DATABASE_HOST: ${DATABASE_HOST}
        DATABASE_PORT: ${DATABASE_PORT}
        DATABASE_NAME: ${DATABASE_NAME}
    volumes:
      - ./ecommerce:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
   # expose:
    #  - "8000"
    ports:
      - "8000:8000"
    env_file:
      - ./ecommerce/.env
    depends_on:
      - db
      - redis
    user: root

  frontend:
    build:
      context: ./frontend/my-app
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_DJANGO_API_URL: ${NEXT_PUBLIC_DJANGO_API_URL}
    volumes:
      # The frontend app is now built into the image itself.
      # This anonymous volume is fine if you still want node_modules to be separate.
      - /app/node_modules
  #  expose:
     # - "3000"
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/my-app/.env.local
    environment:
      NEXT_PUBLIC_DJANGO_API_URL: http://localhost/api/v1
    depends_on:
      - backend

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./ecommerce/.env
    environment:
      POSTGRES_DB: ndunguloren96
      POSTGRES_USER: ndunguloren96
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}

  redis:
    image: redis:alpine
    expose:
      - "6379"

volumes:
  postgres_data:
  static_volume:
  media_volume:
