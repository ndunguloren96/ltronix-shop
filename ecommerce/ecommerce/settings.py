# ecommerce/ecommerce/settings.py

"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from environ import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = Env()
env.read_env(os.path.join(BASE_DIR, '.env')) # read .env file

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY=env('SECRET_KEY')

# Load and map M-Pesa settings
MPESA = {
    'CONSUMER_KEY': env('MPESA_CONSUMER_KEY'),
    'CONSUMER_SECRET': env('MPESA_CONSUMER_SECRET'),
    'MPESA_EXPRESS_SHORTCODE': env('MPESA_EXPRESS_SHORTCODE'),
    'PASSKEY': env('MPESA_PASSKEY'),
    'MPESA_ENVIRONMENT': env('MPESA_ENV', default='sandbox'), # Added default for safety
}
# Make sure MPESA_CALLBACK_URL matches the actual path used in urls.py
MPESA_CALLBACK_URL = env('MPESA_CALLBACK_URL', default='https://man-fond-tortoise.ngrok-free.app/mpesa/stk_push_callback/')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])

# Application definition
# be careful with spelling and comma
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # Google provider for allauth
    'dj_rest_auth',
    'dj_rest_auth.registration',

    # Django REST Framework
    'rest_framework',
    'rest_framework.authtoken', # For Token authentication if you use it alongside sessions

    # Required for DRF Social OAuth2
    'oauth2_provider',
    'social_django',
    'drf_social_oauth2',

    # My Apps
    "store.apps.StoreConfig",
    "payment",
    "django_daraja",
    "users", # Your custom users app
    "corsheaders", # Ensure this is present if you use it for CORS
]

MIDDLEWARE = [
    # If you use CORS, uncomment and move this to the top:
    'corsheaders.middleware.CorsMiddleware', # Moved to the top for CORS
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware", # Ensure this is present and correct
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.sites.middleware.CurrentSiteMiddleware",
]

ROOT_URLCONF = "ecommerce.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
            # Add the path to your project's base template directory if needed
            os.path.join(BASE_DIR, 'templates'), # Added for general templates
            os.path.join(BASE_DIR, 'store', 'templates'),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # `allauth` context processors (needed if using allauth templates directly)
                'allauth.account.context_processors.account', #
                'allauth.socialaccount.context_processors.socialaccount', #
            ],
        },
    },
]

WSGI_APPLICATION = "ecommerce.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': env.db('DATABASE_URL', default=f"postgresql://{env('DATABASE_USER')}:{env('DATABASE_PASSWORD')}@{env('DATABASE_HOST')}:{env('DATABASE_PORT')}/{env('DATABASE_NAME')}")
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

MEDIA_URL = '/images/'

MEDIA_ROOT = os.path.join(
    BASE_DIR, 'static/images'
) # Media root will set a path for all media files to be uploaded to.


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- Custom User Model Setting ---
AUTH_USER_MODEL = 'users.User' # IMPORTANT: Point to your custom user model

# Django REST Framework settings (Updated for allauth/dj-rest-auth)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication', # For session-based authentication
        'rest_framework.authentication.TokenAuthentication',   # Keep for browsable API or if you need token auth elsewhere
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    # Milestone 4, Part 1, Step 2: API Versioning (URLPathVersioning is typical for this format)
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer', # Good for development
    ],
}

SITE_ID = 1 # Essential for django.contrib.sites and django-allauth

# django-allauth specific settings (IMPORTANT: These replace Djoser settings)
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'social_core.backends.google.GoogleOAuth2',
    'drf_social_oauth2.backends.DjangoOAuth2',
)

ACCOUNT_AUTHENTICATION_METHOD = 'email' # set to email
ACCOUNT_EMAIL_REQUIRED = True #
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False # using email
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Or 'optional' or 'none'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True # If you want immediate email confirmation on link click
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5 #
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300 # seconds (5 minutes) #
# Ensure these are set for email-only registration/login fields
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # IMPORTANT: ADDED THIS LINE
ACCOUNT_SIGNUP_FIELDS = ['email'] # Removed '*' - allauth uses this to determine fields to display in forms
ACCOUNT_LOGIN_METHODS = ['email'] # Only allow login by email
ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/1m' # Example: 5 attempts per 1 minute
}
# Redirect URLs after login/logout for allauth (optional, dj-rest-auth handles API responses)
# These are used by allauth's views, not necessarily dj-rest-auth API responses
LOGIN_REDIRECT_URL = '/' #
ACCOUNT_LOGOUT_REDIRECT_URL = '/' #


# dj-rest-auth specific settings (IMPORTANT: These replace Djoser settings)
REST_AUTH = {
    'USE_JWT': False, # Set to True if you plan to use JWT. Milestone implies session.
    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',
    'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer',
    'PASSWORD_RESET_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetSerializer',
    'TOKEN_MODEL': None, # Set to None if using sessions or JWT directly
    'SESSION_LOGIN': True, # Enable session login for browser-based auth
    'PASSWORD_RESET_USE_SITES': True, # For password reset email links
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer', # <--- CHANGE THIS LINE
    # SOCIALACCOUNT_ADAPTER is defined directly below in allauth settings for clarity
    'OLD_PASSWORD_FIELD_ENABLED': True, # Good practice for password change
}


# For dj-rest-auth registration using django-allauth
# IMPORTANT: For dj-rest-auth 7.x.x, these should point to allauth's default adapters,
# unless you have a custom adapter defined in your project.
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'


# Email Backend for django-allauth (important for email verification)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Prints emails to console
# For production, you'd use a real email service like SendGrid, Mailgun, etc.
# Example for SendGrid (requires installation of django-sendgrid-v5 and proper .env variables)
# EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
# SENDGRID_API_KEY = env('SENDGRID_API_KEY')
# DEFAULT_FROM_EMAIL = 'webmaster@ltronixshop.com' # Your shop's email
# SENDGRID_SANDBOX_MODE_IN_DEBUG = True # For testing SendGrid in debug mode

# CORS Headers settings (if you uncommented 'corsheaders.middleware.CorsMiddleware')
CORS_ALLOW_ALL_ORIGINS = True # Set to False and specify CORS_ALLOWED_ORIGINS in production
CORS_ALLOW_CREDENTIALS = True # Required for session cookies to be sent cross-origin

# Social Account Providers for django-allauth
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For more information on these settings, refer to allauth's documentation:
        # https://django-allauth.readthedocs.io/en/latest/providers/google.html
        'APP': {
            'client_id': env('GOOGLE_CLIENT_ID'), # Use lowercase 'client_id'
            'secret': env('GOOGLE_CLIENT_SECRET'), # Use lowercase 'secret'
            'key': '' # Not typically used for Google OAuth
        },
        'SCOPE': [
            'profile',
            'email',
            'openid', # Add 'openid' scope for id_token
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline', # To get a refresh token for long-lived access
            'prompt': 'consent', # Forces consent screen every time
        },
        'VERIFIED_EMAIL': True, # Ensure email is verified by Google
        'EMAIL_ADDRESS_REQUIRED': True,
        'FETCH_USER_INFO': True, # Ensure allauth fetches user info from Google
    }
}