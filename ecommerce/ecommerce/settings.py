"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from environ import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = Env()
env.read_env(os.path.join(BASE_DIR, '.env')) # read .evn file

SECRET_KEY=env('SECRET_KEY')
MPESA_CALLBACK_URL = 'https://358f-102-0-13-70.ngrok-free.app/mpesa/stk_push_callback/'

# Load and map
MPESA_ENVIRONMENT = 'sandbox'
MPESA = {
    'CONSUMER_KEY': env('MPESA_CONSUMER_KEY'),
    'CONSUMER_SECRET': env('MPESA_CONSUMER_SECRET'),
    'MPESA_EXPRESS_SHORTCODE': env('MPESA_EXPRESS_SHORTCODE'),
    'PASSKEY': env('MPESA_PASSKEY'),
    # 'MPESA_ENVIRONMENT': env('MPESA_ENV'),
}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])


# Application definition
# be careful with spelling and comma
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',  # Required by allauth

    # Django REST Framework
    'rest_framework',
    'rest_framework.authtoken', # For Token authentication if you enable it later

    # django-allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount', # For social login like Google
    # 'allauth.socialaccount.providers.google', # We'll add this when we configure Google OAuth

    # dj-rest-auth
    'dj_rest_auth',
    'dj_rest_auth.registration', # For /signup endpoint

    # My Apps
    "store.apps.StoreConfig",
    "payment",
    "django_daraja",
    
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ecommerce.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
            #  Add the path to your project's base template directory if needed
            #  os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'store', 'templates'), 
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ecommerce.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': env.db('DATABASE_URL', default=f"postgresql://{env('DATABASE_USER')}:{env('DATABASE_PASSWORD')}@{env('DATABASE_HOST')}:{env('DATABASE_PORT')}/{env('DATABASE_NAME')}")
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

MEDIA_URL = '/images/'

MEDIA_ROOT = os.path.join(
    BASE_DIR, 'static/images'
)  # Media root will set a path for all media files to be uploaded to.


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django-allauth and dj-rest-auth configuration


# Django REST Framework settings (already there, but confirm if this is minimal)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication', # For session-based authentication
        # 'rest_framework.authentication.TokenAuthentication', # Uncomment if you plan to use Token authentication later
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # Default to allow read-only for anonymous users
    ],
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning', # Or URLPathVersioning
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        # 'rest_framework.renderers.BrowsableAPIRenderer', # Good for development
    ],
}

# django-allauth settings
SITE_ID = 1 # Essential for django-allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False # We'll use email as username
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' # Recommended for production
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True # Allow email confirmation via GET request (simpler for basic setup)
ACCOUNT_ALLOW_REGISTRATION = True

# Redirects after login/logout/email confirmation (can be frontend URLs)
LOGIN_REDIRECT_URL = '/' # Placeholder, will be handled by frontend
ACCOUNT_LOGOUT_REDIRECT_URL = '/' # Placeholder, will be handled by frontend

# dj-rest-auth settings
REST_AUTH = {
    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',
    'TOKEN_MODEL': 'rest_framework.authtoken.models.Token', # Needed if using Token auth
    'USE_JWT': False, # We're focusing on session-based auth as per the plan
    'SESSION_LOGIN': True, # Enable session-based login
    'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer', # Default for /user/ endpoint
    'REGISTER_SERIALIZER': 'dj_rest_auth.registration.serializers.RegisterSerializer', # Default for /signup/
    'PASSWORD_RESET_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetSerializer',
    'PASSWORD_CHANGE_SERIALIZER': 'dj_rest_auth.serializers.PasswordChangeSerializer',
}

# Email Backend for django-allauth (important for email verification)
# For development, you can use console backend or a local SMTP server
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Prints emails to console
# For production, you'd use a service like SendGrid (covered in Part 7)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.sendgrid.net'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'apikey'
# EMAIL_HOST_PASSWORD = 'YOUR_SENDGRID_API_KEY'
# DEFAULT_FROM_EMAIL = 'no-reply@ltronixshop.com' # Your shop's email